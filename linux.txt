Every file that starts with . is a hidden file in linux
a command that starts with sudo means super user do

terminal file commands:
================================================
    - pwd - print working directory (prints the directory where we are in)
    - cd - change directory: cd .. goes up, cd /mydir
    - ls - list content of directory
        ex. ls -l    <- shows detailed list  information about a folder
            if line starts with a d then directory, if it starts with - then it is a file
            drwxr-xr-x  2 minimanic minimanic 4096 May  3 00:45 Desktop      <- the user who the file belongs is minimanic, the members that are part of the minimanic group have read and execute rights, 
                                                                                the other groups are read and execute

    - tree - show tree like directory structure (needs to be installed with sudo apt install tree)
    - clear - clears the terminal
    - id - identity of the current user
    - uname - info about OS - uname -a   <- detailed description of OS
    - hostname - hostname - name of the computer that we gave when installed ubutu
    - uptime - how long the system is up
    - date - date and time
    - watch - repeat the command every 2 seconds
      ex. watch date                  <- every 2 seconds runs date command
          watch -n 5 date             <- runs date every 5 seconds
    - echo - prints the message - echo hello! <- prints hello!
    - df - displays all the file systems: 
        ex. df -h     - for help: df --help
    - du - disk usage 
        ex. du -sh    <- size of current directory
    - man - manual of a command 
        ex. man df
    - apt - install software manager for ubuntu
        ex. sudo apt install git or apt install git
    - yum - install software for redhat /fedora

    - touch - touch a file - creates a file
      ex. touch myfile.txt

    - cat - display content of a file/create and edit a file:
        ex. cat > myfile.txt            <- using redirection , it creates the file and we can write in it(owerwrites if already is something in it)
                line1 text
                line2 text        <- press ctrl-D to exit editing mode        
        ex. cat myfile.txt    <- displays content of myfile
        ex. cat >> myfile.txt      <- opens the file for appending text, it will put the text at the end of file

    - mkdir - make a directory
        ex. mkdir Dir1 Dir2 Dir3     <- creates 3 directory in the current working directory

    - chmod - change mod of a file or directory
        - file permissions: r - read, w - write, x - execute assigned to user (u), group(g) , other(o) : owner rwx, Group rwx, Other Users rwx
            ex. myText.txt   rw- r-x r--   (Owner read/write, Group members read and execute, Other users read)   -- means no rights
        ex. chmod uo+rw myText.txt     <- sets the owner and other users to read/write access
            chmod go-x myText.txt      <- sets the group and other users  to not allowed to execute 
        - also we can set the accesses with numbers 1 = execute, 2 = write, 4 = read .to asign the number we calculate the acceses(sum of them) : rwx = 7, rx = 5, rw = 6(1,2,4 are the bytes 1,2,3)
            ex. chmod 756 myfile.txt           <- user = 7 = rwx, group = 5 = read and execute, other = 6 = read and write
    - chown - change ownership of file/directory

    - ln - link to another file /directory
        ex. ln -s 
    - mv - move a file/directory
        ex. mv myfile.txt mysecondfile.txt      <- renames the myfile.txt to mysecondfile.txt 

    - cp - copy a file or directory
        ex. cp myfile.txt mysecondfile.txt      <- creates another file with the same content as the first filename
        - if we want to copy the subdirectorys, we need the -r (recursive) option specified
        ex. cp -r myfolder myfolder2

    - rm - remove a file or directory
        ex. rm myfile.txt    <-0 removes the myfile file
        - if we want to delete subdirectorys of the directory then we use the -r flag:
        ex. rm -r myfolder
    - wc -l - wordcount - counts the lines, words in a file
        ex. wc -l myfile.txt                   <- number of lines in the file

    - vi/vim - notepad of linux
        - press "i" insert mode, can be entered new lines of text
        - to get back to command mode press "esc"
        - to exit and save wq! enter
    - nano - terminal based file editor !!!!!
        ex. nano myfile.txt
        exit with ctrl+xr
    - head - head of a file
    - tail - tail of a file
    - more - disply file
    - less - display file
    - find - find files  or directorys
    - grep - display lines with a kw, in a file
    - pipe - output of one cmd as input to next